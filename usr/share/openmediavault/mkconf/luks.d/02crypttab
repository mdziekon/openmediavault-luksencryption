#!/bin/bash
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2015 Volker Theile
# @copyright Copyright (c) 2015-2017 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Documentation/Howto:
# http://linux.die.net/man/8/cryptsetup
# http://linux.die.net/man/5/crypttab
# https://gitlab.com/cryptsetup/cryptsetup

set -e
# <target name> <source device>         <key file>      <options>

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_LUKS_CRYPTDISKS_DEFAULT=${OMV_LUKS_CRYPTDISKS_DEFAULT:-"/etc/default/cryptdisks"}
OMV_LUKS_CRYPTTAB_CONFIG=${OMV_LUKS_CRYPTTAB_CONFIG:-"/etc/crypttab"}
OMV_LUKS_DM="conf.service.luks"
OMV_LUKS_DEVICE_DM="conf.service.luks.device"
OMV_LUKS_CT_HEADER="### >> OpenMediaVault LUKS Plugin"
OMV_LUKS_CT_FOOTER="### << OpenMediaVault LUKS Plugin"

_generate_ct_singleline () {
	printf ""${ct_elements[0]}" UUID="${ct_elements[1]}" none luks,noauto\n"
}

cleanup() {
    rm -f "${tmpfile}"
    exit
}
trap cleanup 0 1 2 5 15
tmpfile=$(mktemp)

ct_devices=$(omv-confdbadm read ${OMV_LUKS_DEVICE_DM})
ct_devices_uuid=( $(printf "${ct_devices}" | jq -r '.[] | .uuid') )

## Check if storage device key is enabled and generate the mountpoint
luks_settings=$(omv-confdbadm read ${OMV_LUKS_DM})
if [[ $(echo "${luks_settings}" | jq -r '.|.enablekeydevice') == "true" ]];then
	keydevice_mountpoint="/mnt/keydevice_$(echo "${luks_settings}" | jq -r '.|.uuid')"
	keydevice_enabled="1"
else
	keydevice_enabled="0"
fi

echo "${OMV_LUKS_CT_HEADER}" > ${tmpfile}
for uuid in ${ct_devices_uuid[@]};do
	ct_elements=( $(printf "${ct_devices}" | jq -r --arg uuid $uuid '.[] | 
																	 select(.uuid==$uuid) | 
																	 .name, 
																	 .luksuuid,
																	 .enable,
																	 .keyfilename') )
	## index(0): targetname 
	## index(1): luksuuid 
	## index(2): enable key file name 
	## index(3): key file name
	case ${ct_elements[2]} in
		"false")
			_generate_ct_singleline >> ${tmpfile}
			;;
		"true")
			if [ "$keydevice_enabled" == "1" ];then
				printf ""${ct_elements[0]}" UUID="${ct_elements[1]}" "${keydevice_mountpoint}"/"${ct_elements[3]}" luks,noauto\n" >> ${tmpfile}
			elif [ "$keydevice_enabled" == "0" ];then
				_generate_ct_singleline >> ${tmpfile}
			fi
			;;
		esac
done
echo "${OMV_LUKS_CT_FOOTER}" >> ${tmpfile}

if ! grep -E "^${OMV_LUKS_CT_HEADER}" ${OMV_LUKS_CRYPTTAB_CONFIG} > /dev/null; then
	cat "${tmpfile}" >> ${OMV_LUKS_CRYPTTAB_CONFIG}
else
	sed -i -e "/${OMV_LUKS_CT_HEADER}/r ${tmpfile}" -e "/${OMV_LUKS_CT_HEADER}/,/${OMV_LUKS_CT_FOOTER}/d" ${OMV_LUKS_CRYPTTAB_CONFIG}
fi