#!/bin/bash
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2015 Volker Theile
# @copyright Copyright (c) 2015-2017 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Documentation/Howto:
# http://linux.die.net/man/8/cryptsetup
# http://linux.die.net/man/5/crypttab
# https://gitlab.com/cryptsetup/cryptsetup

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_LUKS_CRYPTDISKS_DEFAULT=${OMV_LUKS_CRYPTDISKS_DEFAULT:-"/etc/default/cryptdisks"}
OMV_LUKS_CRYPTTAB_CONFIG=${OMV_LUKS_CRYPTTAB_CONFIG:-"/etc/crypttab"}
OMV_SF_DM="conf.system.sharedfolder"
OMV_LUKS_DM="conf.service.luks"
OMV_LUKS_DEVICE_DM="conf.service.luks.device"
OMV_FSTAB_MNTENT_DM="conf.system.filesystem.mountpoint"
OMV_LUKS_DECRYPT_TARGET="/etc/systemd/system/decrypt.target"

_generate_decrypt_target ()
{
	cat << EOF > ${OMV_LUKS_DECRYPT_TARGET}
[Unit]
Description=Decrypted System
Documentation=https://blog.iwakd.de/headless-luks-decryption-via-ssh
Requires=before-decrypt.target
After=before-decrypt.target
Conflicts=systemd-ask-password-console.path systemd-ask-password-console.service systemd-ask-password-plymouth.path systemd-ask-password-plymouth.service
EOF
	
### Get all cryptodevices in crypttab and put them in the decrypt target as dependancy
	for i in ${omv_luks_crypttab_devices[@]};do
		echo "Requires=systemd-cryptsetup@`systemd-escape --suffix "service" --path $i`" >> "${OMV_LUKS_DECRYPT_TARGET}"
	done

### Get all openmediavault fstab mount points and put them in the decrypt target as dependancy
	for i in ${omv_systemd_mnt_points[@]};do
		echo "Requires=`systemd-escape --suffix "mount" --path $i`" >> "${OMV_LUKS_DECRYPT_TARGET}"
	done

### Get all sharedfolder systemd bind mount units, disable them and add them to the decrypt target as dependancy
	for name in ${sf_names[@]};do
		sf_unit="sharedfolders-"`systemd-escape --suffix "mount" --path $name`
		# systemctl disable "${sf_unit}"
		echo "Requires=${sf_unit}" >> "${OMV_LUKS_DECRYPT_TARGET}"
	done

### Add systemd service unit that will trigger full system start
	echo "Requires=omv-luks-start-full-systemd.service" >> "${OMV_LUKS_DECRYPT_TARGET}"
}

sf_all=$(omv-confdbadm read ${OMV_SF_DM})
sf_names=( $(echo ${sf_all} | jq -r '.[]|.name') )
luks_settings_enable=$(omv-confdbadm read ${OMV_LUKS_DM} | jq -r '.|.enable')

case "${luks_settings_enable}" in
	"true")
		omv_systemd_mnt_points=( $(omv-confdbadm read --prettify ${OMV_FSTAB_MNTENT_DM} | 
                                                        jq -r '.[]| 
                                                        	   select(.type!="zfs")|
                                                        	   .dir') )
		omv_luks_crypttab_devices=( $(omv-confdbadm read ${OMV_LUKS_DEVICE_DM} |
														jq -r '.[] |
															   .name' ) )
		_generate_decrypt_target
		systemctl set-default before-decrypt.target
		;;
	"false")
		if [ -f ${OMV_LUKS_DECRYPT_TARGET} ]; then
			rm -rf ${OMV_LUKS_DECRYPT_TARGET}
		fi
		for name in ${sf_names[@]};do
			sf_unit="sharedfolders-"`systemd-escape --suffix "mount" --path $name`
			systemctl enable "${sf_unit}"
		done
		systemctl set-default graphical.target
		;;
esac


### process all sharedfolders systemd bind units and disabling them









